const express = require('express');
const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');

const app = express();
const HTTP_PORT = process.env.HTTP_PORT || 3000;
const HTTPS_PORT = process.env.HTTPS_PORT || 3443;
const isDev = process.argv.includes('--dev');

// Î≥¥Ïïà ÎØ∏Îì§Ïõ®Ïñ¥ (Í∞úÎ∞úÏö© - HTTPS Í∞ïÏ†ú ÏôÑÏ†Ñ ÎπÑÌôúÏÑ±Ìôî)
if (isDev) {
    // Í∞úÎ∞ú ÌôòÍ≤Ω: Î™®Îì† HTTPS Í¥ÄÎ†® Î≥¥Ïïà Í∏∞Îä• ÎπÑÌôúÏÑ±Ìôî
    app.use(helmet({
        contentSecurityPolicy: false,
        hsts: false,
        noSniff: false,
        frameguard: false,
        xssFilter: false,
        referrerPolicy: false,
        crossOriginOpenerPolicy: false,
        crossOriginResourcePolicy: false,
        crossOriginEmbedderPolicy: false,
        originAgentCluster: false,
        dnsPrefetchControl: false,
        ieNoOpen: false,
        permittedCrossDomainPolicies: false
    }));
} else {
    // ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω: ÏôÑÏ†ÑÌïú Î≥¥Ïïà ÏÑ§Ï†ï
    app.use(helmet({
        contentSecurityPolicy: {
            directives: {
                defaultSrc: ["'self'"],
                styleSrc: ["'self'", "'unsafe-inline'"],
                scriptSrc: ["'self'", "'unsafe-inline'", 'https://apis.google.com', 'https://accounts.google.com'],
                connectSrc: ["'self'", 'https://*.todoist.com', 'https://*.atlassian.net', 'https://calendar.google.com', 'https://api.allorigins.win', 'https://corsproxy.io', 'https://cors-anywhere.herokuapp.com'],
                imgSrc: ["'self'", 'data:', 'https:'],
                fontSrc: ["'self'"],
                objectSrc: ["'none'"],
                mediaSrc: ["'self'"],
                frameSrc: ["'self'", 'https://accounts.google.com']
            },
        }
    }));
}

// CORS ÏÑ§Ï†ï
app.use(cors({
    origin: isDev ? '*' : [
        'http://localhost:3000',
        'https://your-domain.com' // Ïã§Ï†ú ÎèÑÎ©îÏù∏ÏúºÎ°ú Î≥ÄÍ≤Ω
    ],
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));

// ÏïïÏ∂ï ÎØ∏Îì§Ïõ®Ïñ¥
app.use(compression());

// Ï†ïÏ†Å ÌååÏùº ÏÑúÎπô
app.use('/assets', express.static(path.join(__dirname, 'assets'), {
    maxAge: isDev ? 0 : '1d', // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî Ï∫êÏãú ÎπÑÌôúÏÑ±Ìôî
    etag: isDev ? false : true,
    setHeaders: (res, path) => {
        if (isDev) {
            res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
            res.setHeader('Pragma', 'no-cache');
            res.setHeader('Expires', '0');
        }
    }
}));

// PWA Í¥ÄÎ†® ÌååÏùº ÏÑúÎπô
app.get('/manifest.json', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.sendFile(path.join(__dirname, 'manifest.json'));
});

app.get('/sw.js', (req, res) => {
    res.setHeader('Content-Type', 'application/javascript');
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.sendFile(path.join(__dirname, 'sw.js'));
});

// Î©îÏù∏ ÌéòÏù¥ÏßÄÎì§ ÎùºÏö∞ÌåÖ
const pages = [
    'main',
    'inbox', 
    'today',
    'projects',
    'eisenhower_matrix',
    'completed',
    'settings'
];

pages.forEach(page => {
    // ÌôïÏû•Ïûê ÏóÜÎäî Í≤ΩÎ°úÏôÄ .html ÌôïÏû•Ïûê Í≤ΩÎ°ú Î™®Îëê Ï≤òÎ¶¨
    app.get(`/${page}`, (req, res) => {
        if (isDev) {
            res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
            res.setHeader('Pragma', 'no-cache');
            res.setHeader('Expires', '0');
        }
        res.sendFile(path.join(__dirname, 'design', `${page}.html`));
    });
    
    app.get(`/${page}.html`, (req, res) => {
        if (isDev) {
            res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
            res.setHeader('Pragma', 'no-cache');
            res.setHeader('Expires', '0');
        }
        res.sendFile(path.join(__dirname, 'design', `${page}.html`));
    });
});

// Î£®Ìä∏ Í≤ΩÎ°úÎäî Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
app.get('/', (req, res) => {
    res.redirect('/main');
});

// API ÏóîÎìúÌè¨Ïù∏Ìä∏ (Ìñ•ÌõÑ ÌôïÏû•Ïö©)
app.use(express.json());

// ÏÑ§Ï†ï Ï†ÄÏû•/Î∂àÎü¨Ïò§Í∏∞ API
app.post('/api/settings', (req, res) => {
    // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÎÇò ÌååÏùº ÏãúÏä§ÌÖúÏóê Ï†ÄÏû•
    res.json({ success: true, message: 'ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.' });
});

app.get('/api/settings', (req, res) => {
    // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Ï†ÄÏû•Îêú ÏÑ§Ï†ïÏùÑ Î∂àÎü¨Ïò¥
    res.json({ settings: {} });
});

// Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        version: '1.0.0'
    });
});

// 404 Ï≤òÎ¶¨
app.use('*', (req, res) => {
    res.status(404).sendFile(path.join(__dirname, 'design', 'main.html'));
});

// ÏóêÎü¨ Ìï∏Îì§ÎßÅ ÎØ∏Îì§Ïõ®Ïñ¥
app.use((err, req, res, next) => {
    console.error('Error:', err.stack);
    res.status(500).json({
        error: 'Internal Server Error',
        message: isDev ? err.message : 'Something went wrong!'
    });
});

// SSL Ïù∏Ï¶ùÏÑú ÏÑ§Ï†ï
let sslOptions = null;
try {
    sslOptions = {
        key: fs.readFileSync(path.join(__dirname, 'ssl', 'key.pem')),
        cert: fs.readFileSync(path.join(__dirname, 'ssl', 'cert.pem'))
    };
} catch (error) {
    console.warn('SSL certificates not found. HTTPS server will not start.');
}

// HTTP ÏÑúÎ≤Ñ ÏãúÏûë
const httpServer = http.createServer(app);
httpServer.listen(HTTP_PORT, () => {
    console.log(`
üöÄ Clarity Matrix GTD System
============================
Environment: ${isDev ? 'Development' : 'Production'}
HTTP Server: http://localhost:${HTTP_PORT}
Health: http://localhost:${HTTP_PORT}/health

Available pages (HTTP):
${pages.map(page => `- http://localhost:${HTTP_PORT}/${page}`).join('\n')}
    `);
});

// HTTPS ÏÑúÎ≤Ñ ÏãúÏûë (SSL Ïù∏Ï¶ùÏÑúÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå)
let httpsServer = null;
if (sslOptions) {
    httpsServer = https.createServer(sslOptions, app);
    httpsServer.listen(HTTPS_PORT, () => {
        console.log(`
üîí HTTPS Server: https://localhost:${HTTPS_PORT}
Health: https://localhost:${HTTPS_PORT}/health

Available pages (HTTPS):
${pages.map(page => `- https://localhost:${HTTPS_PORT}/${page}`).join('\n')}

‚ö†Ô∏è  Self-signed certificate: Browser will show security warning
    Click "Advanced" ‚Üí "Proceed to localhost (unsafe)" to continue
        `);
    });
}

console.log('\nPress Ctrl+C to stop the servers.\n');

module.exports = { app, httpServer, httpsServer };